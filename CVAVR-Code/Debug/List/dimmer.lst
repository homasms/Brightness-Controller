
AVRASM ver. 2.1.30  F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm Thu Mar 04 22:07:35 2021

F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1093): warning: Register r9 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1095): warning: Register r11 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1096): warning: Register r12 already defined by the .DEF directive
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _minute=R4
                 	.DEF _minute_msb=R5
                 	.DEF _hour=R6
                 	.DEF _hour_msb=R7
                 	.DEF _second=R8
                 	.DEF _second_msb=R9
                 	.DEF _fifthSecond=R10
                 	.DEF _fifthSecond_msb=R11
                 	.DEF _timeOfOpeningCurtain=R12
                 	.DEF _timeOfOpeningCurtain_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0182 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x2000060:
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1133): warning: .cseg .db misalignment - padding zero byte
00002b 0001      	.DB  0x1
                 _0x2000000:
00002c 4e2d
00002d 4e41
00002e 4900
00002f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Rizpar\project\dimmer - Copy\Debug\List\dimmer.asm(1136): warning: .cseg .db misalignment - padding zero byte
000030 0000      	.DB  0x0
                 _0x2020003:
000031 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000032 0002      	.DW  0x02
000033 000c      	.DW  0x0C
000034 0054      	.DW  __REG_VARS*2
                 
000035 0001      	.DW  0x01
000036 0260      	.DW  __seed_G100
000037 0056      	.DW  _0x2000060*2
                 
000038 0002      	.DW  0x02
000039 0264      	.DW  __base_y_G101
00003a 0062      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 007a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * dimmer.c
                 ; *
                 ; * Created: 1/3/2021 12:43:42 PM
                 ; * Author: ASA
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <Mega32.h>
                 ;#include <stdlib.h>
                 ;#include <lcd.h>
                 ;#asm
                    .equ __lcd_port=0x18
                 ; 0000 000F #endasm
                 ;#define ADC_VREF_TYPE 0xC0  //Volt.Ref ==> 2.56v
                 ;unsigned minute,hour,second, fifthSecond;
                 ;int timeOfOpeningCurtain = 0; // the time that curtain gets open
                 ;
                 ;void darkDay(float);
                 ;void lightDay(float);
                 ;void controlLED(float);
                 ;
                 ;float read_adc(unsigned char adc_input)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 001A     //int result;
                 ; 0000 001B     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000069 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00006a 81e8      	LD   R30,Y
00006b 6ce0      	ORI  R30,LOW(0xC0)
00006c b9e7      	OUT  0x7,R30
                 ; 0000 001C     delay_us(10);   // Delay nseeded for the stabilization of the ADC input voltage
                +
00006d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00006e 958a     +DEC R24
00006f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001D     ADCSRA|=0x40; // Start the AD conversion
000070 9a36      	SBI  0x6,6
                 ; 0000 001E     while ((ADCSRA & 0x10)==0); // Wait for the AD conversion to complete
                 _0x3:
000071 9b34      	SBIS 0x6,4
000072 cffe      	RJMP _0x3
                 ; 0000 001F     ADCSRA|=0x10;
000073 9a34      	SBI  0x6,4
                 ; 0000 0020     //result = ADCW;
                 ; 0000 0021     return ADCW;
000074 b1e4      	IN   R30,0x4
000075 b1f5      	IN   R31,0x4+1
000076 940e 03bb 	CALL SUBOPT_0x0
000078 940c 0364 	JMP  _0x20A0002
                 ; 0000 0022 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0026     char buffer[32];
                 ; 0000 0027     float T;
                 ; 0000 0028 
                 ; 0000 0029     lcd_init(16);
00007a 97a4      	SBIW R28,36
                 ;	buffer -> Y+4
                 ;	T -> Y+0
00007b e1a0      	LDI  R26,LOW(16)
00007c 940e 0332 	CALL _lcd_init
                 ; 0000 002A     hour = 10;
00007e e0ea      	LDI  R30,LOW(10)
00007f e0f0      	LDI  R31,HIGH(10)
000080 013f      	MOVW R6,R30
                 ; 0000 002B     DDRC = (1<<0) | (1<<1);
000081 e0e3      	LDI  R30,LOW(3)
000082 bbe4      	OUT  0x14,R30
                 ; 0000 002C     DDRD = (1<<0);
000083 e0e1      	LDI  R30,LOW(1)
000084 bbe1      	OUT  0x11,R30
                 ; 0000 002D     DDRA = 0<<0;
000085 e0e0      	LDI  R30,LOW(0)
000086 bbea      	OUT  0x1A,R30
                 ; 0000 002E     ADMUX=ADC_VREF_TYPE & 0xff;
000087 ece0      	LDI  R30,LOW(192)
000088 b9e7      	OUT  0x7,R30
                 ; 0000 002F     ADCSRA=0x85;
000089 e8e5      	LDI  R30,LOW(133)
00008a b9e6      	OUT  0x6,R30
                 ; 0000 0030 
                 ; 0000 0031     // timer0
                 ; 0000 0032     TCCR0=0x03;
00008b e0e3      	LDI  R30,LOW(3)
00008c bfe3      	OUT  0x33,R30
                 ; 0000 0033     TCNT0=6;
00008d e0e6      	LDI  R30,LOW(6)
00008e bfe2      	OUT  0x32,R30
                 ; 0000 0034     TIMSK=0x01;
00008f e0e1      	LDI  R30,LOW(1)
000090 bfe9      	OUT  0x39,R30
                 ; 0000 0035     #asm("sei");
000091 9478      	sei
                 ; 0000 0036 
                 ; 0000 0037 while (1)
                 _0x6:
                 ; 0000 0038     {
                 ; 0000 0039     T=read_adc(0);
000092 e0a0      	LDI  R26,LOW(0)
000093 dfd5      	RCALL _read_adc
000094 940e 03c0 	CALL SUBOPT_0x1
                 ; 0000 003A     T=(T*2.56)/1024;
000096 940e 03c3 	CALL SUBOPT_0x2
                +
000098 e0ea     +LDI R30 , LOW ( 0x4023D70A )
000099 edf7     +LDI R31 , HIGH ( 0x4023D70A )
00009a e263     +LDI R22 , BYTE3 ( 0x4023D70A )
00009b e470     +LDI R23 , BYTE4 ( 0x4023D70A )
                 	__GETD1N 0x4023D70A
00009c 940e 0541 	CALL __MULF12
00009e 01df      	MOVW R26,R30
00009f 01cb      	MOVW R24,R22
                +
0000a0 e0e0     +LDI R30 , LOW ( 0x44800000 )
0000a1 e0f0     +LDI R31 , HIGH ( 0x44800000 )
0000a2 e860     +LDI R22 , BYTE3 ( 0x44800000 )
0000a3 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
0000a4 940e 058f 	CALL __DIVF21
0000a6 940e 03c0 	CALL SUBOPT_0x1
                 ; 0000 003B     lcd_gotoxy(1,0);ftoa(second,2,buffer);lcd_puts(buffer);
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 93ea      	ST   -Y,R30
0000aa e0a0      	LDI  R26,LOW(0)
0000ab 940e 02c0 	CALL _lcd_gotoxy
0000ad 01f4      	MOVW R30,R8
0000ae 940e 03c6 	CALL SUBOPT_0x3
                 ; 0000 003C     lcd_gotoxy(0,1);ftoa(minute,2,buffer);lcd_puts(buffer);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 93ea      	ST   -Y,R30
0000b2 e0a1      	LDI  R26,LOW(1)
0000b3 940e 02c0 	CALL _lcd_gotoxy
0000b5 01f2      	MOVW R30,R4
0000b6 940e 03c6 	CALL SUBOPT_0x3
                 ; 0000 003D     //delay_ms(100);
                 ; 0000 003E     //lcd_clear();
                 ; 0000 003F     if(T < 0.45 ){
0000b8 940e 03d3 	CALL SUBOPT_0x4
0000ba f450      	BRSH _0x9
                 ; 0000 0040         if(hour > 7 & hour < 18){
0000bb 940e 03db 	CALL SUBOPT_0x5
0000bd f021      	BREQ _0xA
                 ; 0000 0041             darkDay(T);
0000be 940e 03c3 	CALL SUBOPT_0x2
0000c0 d093      	RCALL _darkDay
                 ; 0000 0042         }
                 ; 0000 0043         else
0000c1 c003      	RJMP _0xB
                 _0xA:
                 ; 0000 0044             //PORTC.0 = 1;
                 ; 0000 0045             controlLED(T);
0000c2 940e 03c3 	CALL SUBOPT_0x2
0000c4 d011      	RCALL _controlLED
                 ; 0000 0046     }
                 _0xB:
                 ; 0000 0047     if(T > 0.45){
                 _0x9:
0000c5 940e 03d3 	CALL SUBOPT_0x4
0000c7 f009      	BREQ PC+2
0000c8 f408      	BRCC PC+2
0000c9 c00a      	RJMP _0xC
                 ; 0000 0048         if(hour > 7 & hour < 18)
0000ca 940e 03db 	CALL SUBOPT_0x5
0000cc f021      	BREQ _0xD
                 ; 0000 0049             lightDay(T);
0000cd 940e 03c3 	CALL SUBOPT_0x2
0000cf d0a7      	RCALL _lightDay
                 ; 0000 004A 
                 ; 0000 004B         else
0000d0 c003      	RJMP _0xE
                 _0xD:
                 ; 0000 004C             //PORTC.0 = 0;
                 ; 0000 004D             controlLED(T);
0000d1 940e 03c3 	CALL SUBOPT_0x2
0000d3 d002      	RCALL _controlLED
                 ; 0000 004E         }
                 _0xE:
                 ; 0000 004F     }
                 _0xC:
0000d4 cfbd      	RJMP _0x6
                 ; 0000 0050 }
                 _0xF:
0000d5 cfff      	RJMP _0xF
                 ; .FEND
                 ;
                 ;void controlLED(float T){
                 ; 0000 0052 void controlLED(float T){
                 _controlLED:
                 ; .FSTART _controlLED
                 ; 0000 0053     int onTime, offTime;
                 ; 0000 0054     onTime = (5 - T);
0000d6 940e 0626 	CALL __PUTPARD2
0000d8 940e 063d 	CALL __SAVELOCR4
                 ;	T -> Y+4
                 ;	onTime -> R16,R17
                 ;	offTime -> R18,R19
0000da 940e 03e7 	CALL SUBOPT_0x6
                +
0000dc e0e0     +LDI R30 , LOW ( 0x40A00000 )
0000dd e0f0     +LDI R31 , HIGH ( 0x40A00000 )
0000de ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
0000df e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
0000e0 940e 04ea 	CALL __SUBF12
0000e2 940e 0480 	CALL __CFD1
0000e4 018f      	MOVW R16,R30
                 ; 0000 0055     offTime = (T)/ 100;
0000e5 940e 03e7 	CALL SUBOPT_0x6
                +
0000e7 e0e0     +LDI R30 , LOW ( 0x42C80000 )
0000e8 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0000e9 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0000ea e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0000eb 940e 058f 	CALL __DIVF21
0000ed 940e 0480 	CALL __CFD1
0000ef 019f      	MOVW R18,R30
                 ; 0000 0056     PORTC.0 = 1;
0000f0 9aa8      	SBI  0x15,0
                 ; 0000 0057     delay_ms(onTime);
0000f1 01d8      	MOVW R26,R16
0000f2 940e 0441 	CALL _delay_ms
                 ; 0000 0058     PORTC.0 = 0;
0000f4 98a8      	CBI  0x15,0
                 ; 0000 0059     delay_ms(offTime);
0000f5 01d9      	MOVW R26,R18
0000f6 940e 0441 	CALL _delay_ms
                 ; 0000 005A }
0000f8 940e 0642 	CALL __LOADLOCR4
0000fa c07a      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void openCurtain(float T, float neededTimeForOpenCurtain){
                 ; 0000 005C void openCurtain(float T, float neededTimeForOpenCurtain){
                 _openCurtain:
                 ; .FSTART _openCurtain
                 ; 0000 005D     int onTime;
                 ; 0000 005E     int remainTimeForOpeningCurtain = neededTimeForOpenCurtain - timeOfOpeningCurtain;
                 ; 0000 005F     // stop opening curtain when that is completely open
                 ; 0000 0060     if(10 < remainTimeForOpeningCurtain)
0000fb 940e 0626 	CALL __PUTPARD2
0000fd 940e 063d 	CALL __SAVELOCR4
                 ;	T -> Y+8
                 ;	neededTimeForOpenCurtain -> Y+4
                 ;	onTime -> R16,R17
                 ;	remainTimeForOpeningCurtain -> R18,R19
0000ff 01f6      	MOVW R30,R12
000100 940e 03e7 	CALL SUBOPT_0x6
000102 940e 03ec 	CALL SUBOPT_0x7
000104 940e 03f1 	CALL SUBOPT_0x8
000106 940e 047e 	CALL __CFD1U
000108 019f      	MOVW R18,R30
                +
000109 302b     +CPI R18 , LOW ( 11 )
00010a e0e0     +LDI R30 , HIGH ( 11 )
00010b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,11
00010c f084      	BRLT _0x14
                 ; 0000 0061         onTime = 10 - T + T;
                +
00010d 85a8     +LDD R26 , Y + 8
00010e 85b9     +LDD R27 , Y + 8 + 1
00010f 858a     +LDD R24 , Y + 8 + 2
000110 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000111 940e 03f6 	CALL SUBOPT_0x9
                +
000113 85a8     +LDD R26 , Y + 8
000114 85b9     +LDD R27 , Y + 8 + 1
000115 858a     +LDD R24 , Y + 8 + 2
000116 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000117 940e 04f1 	CALL __ADDF12
000119 940e 0480 	CALL __CFD1
00011b 018f      	MOVW R16,R30
                 ; 0000 0062     else
00011c c001      	RJMP _0x15
                 _0x14:
                 ; 0000 0063         onTime = remainTimeForOpeningCurtain;
00011d 0189      	MOVW R16,R18
                 ; 0000 0064     PORTC.1 = 1;
                 _0x15:
00011e 9aa9      	SBI  0x15,1
                 ; 0000 0065     delay_ms(onTime);
00011f 01d8      	MOVW R26,R16
000120 940e 0441 	CALL _delay_ms
                 ; 0000 0066     PORTC.1 = 0;
000122 98a9      	CBI  0x15,1
                 ; 0000 0067     delay_ms(onTime);
000123 01d8      	MOVW R26,R16
000124 940e 0441 	CALL _delay_ms
                 ; 0000 0068     timeOfOpeningCurtain += onTime;
                +
000126 0ec0     +ADD R12 , R16
000127 1ed1     +ADC R13 , R17
                 	__ADDWRR 12,13,16,17
                 ; 0000 0069 }
000128 940e 0642 	CALL __LOADLOCR4
00012a 962c      	ADIW R28,12
00012b 9508      	RET
                 ; .FEND
                 ;
                 ;void closeCurtain(float T){
                 ; 0000 006B void closeCurtain(float T){
                 _closeCurtain:
                 ; .FSTART _closeCurtain
                 ; 0000 006C     int onTime;
                 ; 0000 006D     // if curtain is not opened at all, dont try to close it
                 ; 0000 006E     if(timeOfOpeningCurtain > 0){
00012c 940e 0626 	CALL __PUTPARD2
00012e 931a      	ST   -Y,R17
00012f 930a      	ST   -Y,R16
                 ;	T -> Y+2
                 ;	onTime -> R16,R17
000130 2400      	CLR  R0
000131 140c      	CP   R0,R12
000132 040d      	CPC  R0,R13
000133 f4e4      	BRGE _0x1A
                 ; 0000 006F         if(timeOfOpeningCurtain > 10)
000134 e0ea      	LDI  R30,LOW(10)
000135 e0f0      	LDI  R31,HIGH(10)
000136 15ec      	CP   R30,R12
000137 05fd      	CPC  R31,R13
000138 f464      	BRGE _0x1B
                 ; 0000 0070             onTime = 10 - T + T;
000139 940e 03fd 	CALL SUBOPT_0xA
00013b 940e 03f6 	CALL SUBOPT_0x9
00013d 940e 03fd 	CALL SUBOPT_0xA
00013f 940e 04f1 	CALL __ADDF12
000141 940e 0480 	CALL __CFD1
000143 018f      	MOVW R16,R30
                 ; 0000 0071         else
000144 c001      	RJMP _0x1C
                 _0x1B:
                 ; 0000 0072             onTime = timeOfOpeningCurtain;
000145 0186      	MOVW R16,R12
                 ; 0000 0073         PORTD.0 = 1;
                 _0x1C:
000146 9a90      	SBI  0x12,0
                 ; 0000 0074         delay_ms(onTime);
000147 01d8      	MOVW R26,R16
000148 940e 0441 	CALL _delay_ms
                 ; 0000 0075         PORTD.0 = 0;
00014a 9890      	CBI  0x12,0
                 ; 0000 0076         delay_ms(onTime);
00014b 01d8      	MOVW R26,R16
00014c 940e 0441 	CALL _delay_ms
                 ; 0000 0077         timeOfOpeningCurtain -= onTime;
                +
00014e 1ac0     +SUB R12 , R16
00014f 0ad1     +SBC R13 , R17
                 	__SUBWRR 12,13,16,17
                 ; 0000 0078     }
                 ; 0000 0079 }
                 _0x1A:
000150 8119      	LDD  R17,Y+1
000151 8108      	LDD  R16,Y+0
000152 9626      	ADIW R28,6
000153 9508      	RET
                 ; .FEND
                 ;
                 ;// the light is low, on day
                 ;void darkDay(float T){
                 ; 0000 007C void darkDay(float T){
                 _darkDay:
                 ; .FSTART _darkDay
                 ; 0000 007D     float neededTimeForOpenCurtain = 2000;
                 ; 0000 007E     // curtain is compeletly open
                 ; 0000 007F     if(timeOfOpeningCurtain >= neededTimeForOpenCurtain)
000154 940e 0626 	CALL __PUTPARD2
000156 9724      	SBIW R28,4
000157 e0e0      	LDI  R30,LOW(0)
000158 83e8      	ST   Y,R30
000159 83e9      	STD  Y+1,R30
00015a efea      	LDI  R30,LOW(250)
00015b 83ea      	STD  Y+2,R30
00015c e4e4      	LDI  R30,LOW(68)
00015d 83eb      	STD  Y+3,R30
                 ;	T -> Y+4
                 ;	neededTimeForOpenCurtain -> Y+0
00015e 940e 0402 	CALL SUBOPT_0xB
000160 01d6      	MOVW R26,R12
000161 940e 0601 	CALL __CWD2
000163 940e 062d 	CALL __CDF2
000165 940e 05d4 	CALL __CMPF12
000167 f020      	BRLO _0x21
                 ; 0000 0080         controlLED(T);
000168 940e 03e7 	CALL SUBOPT_0x6
00016a df6b      	RCALL _controlLED
                 ; 0000 0081     // curtain is not completely open
                 ; 0000 0082     else
00016b c009      	RJMP _0x22
                 _0x21:
                 ; 0000 0083         openCurtain(T, neededTimeForOpenCurtain);
                +
00016c 81ec     +LDD R30 , Y + 4
00016d 81fd     +LDD R31 , Y + 4 + 1
00016e 816e     +LDD R22 , Y + 4 + 2
00016f 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000170 940e 0621 	CALL __PUTPARD1
000172 940e 03e7 	CALL SUBOPT_0x6
000174 df86      	RCALL _openCurtain
                 ; 0000 0084 }
                 _0x22:
                 _0x20A0005:
000175 9628      	ADIW R28,8
000176 9508      	RET
                 ; .FEND
                 ;
                 ;// the light is too much, on day
                 ;void lightDay(float T){
                 ; 0000 0087 void lightDay(float T){
                 _lightDay:
                 ; .FSTART _lightDay
                 ; 0000 0088     // if LED is on, turn it off
                 ; 0000 0089     if(PORTC.0 == 1)
000177 940e 0626 	CALL __PUTPARD2
                 ;	T -> Y+0
000179 9ba8      	SBIS 0x15,0
00017a c002      	RJMP _0x23
                 ; 0000 008A         PORTC.0 = 0;
00017b 98a8      	CBI  0x15,0
                 ; 0000 008B     // if LED is off, close the curtain
                 ; 0000 008C     else
00017c c003      	RJMP _0x26
                 _0x23:
                 ; 0000 008D         closeCurtain(T);
00017d 940e 03c3 	CALL SUBOPT_0x2
00017f dfac      	RCALL _closeCurtain
                 ; 0000 008E }
                 _0x26:
000180 940c 03ac 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0092 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000182 93ea      	ST   -Y,R30
000183 93fa      	ST   -Y,R31
000184 b7ef      	IN   R30,SREG
000185 93ea      	ST   -Y,R30
                 ; 0000 0093 
                 ; 0000 0094     TCNT0=6;
000186 e0e6      	LDI  R30,LOW(6)
000187 bfe2      	OUT  0x32,R30
                 ; 0000 0095 
                 ; 0000 0096     if(fifthSecond == 500){
000188 efe4      	LDI  R30,LOW(500)
000189 e0f1      	LDI  R31,HIGH(500)
00018a 15ea      	CP   R30,R10
00018b 05fb      	CPC  R31,R11
00018c f511      	BRNE _0x27
                 ; 0000 0097         fifthSecond = 0;
00018d 24aa      	CLR  R10
00018e 24bb      	CLR  R11
                 ; 0000 0098         if(second==59){
00018f e3eb      	LDI  R30,LOW(59)
000190 e0f0      	LDI  R31,HIGH(59)
000191 15e8      	CP   R30,R8
000192 05f9      	CPC  R31,R9
000193 f4b9      	BRNE _0x28
                 ; 0000 0099             second=0;
000194 2488      	CLR  R8
000195 2499      	CLR  R9
                 ; 0000 009A             if(minute==59){
000196 15e4      	CP   R30,R4
000197 05f5      	CPC  R31,R5
000198 f471      	BRNE _0x29
                 ; 0000 009B                 minute=0;
000199 2444      	CLR  R4
00019a 2455      	CLR  R5
                 ; 0000 009C                 if(hour==23)
00019b e1e7      	LDI  R30,LOW(23)
00019c e0f0      	LDI  R31,HIGH(23)
00019d 15e6      	CP   R30,R6
00019e 05f7      	CPC  R31,R7
00019f f419      	BRNE _0x2A
                 ; 0000 009D                     hour=0;
0001a0 2466      	CLR  R6
0001a1 2477      	CLR  R7
                 ; 0000 009E                 else
0001a2 c003      	RJMP _0x2B
                 _0x2A:
                 ; 0000 009F                     hour++;
0001a3 01f3      	MOVW R30,R6
0001a4 9631      	ADIW R30,1
0001a5 013f      	MOVW R6,R30
                 ; 0000 00A0             }
                 _0x2B:
                 ; 0000 00A1             else
0001a6 c003      	RJMP _0x2C
                 _0x29:
                 ; 0000 00A2                 minute++;
0001a7 01f2      	MOVW R30,R4
0001a8 9631      	ADIW R30,1
0001a9 012f      	MOVW R4,R30
                 ; 0000 00A3         }
                 _0x2C:
                 ; 0000 00A4         else
0001aa c003      	RJMP _0x2D
                 _0x28:
                 ; 0000 00A5             second ++;
0001ab 01f4      	MOVW R30,R8
0001ac 9631      	ADIW R30,1
0001ad 014f      	MOVW R8,R30
                 ; 0000 00A6     }
                 _0x2D:
                 ; 0000 00A7     else
0001ae c003      	RJMP _0x2E
                 _0x27:
                 ; 0000 00A8         fifthSecond++;
0001af 01f5      	MOVW R30,R10
0001b0 9631      	ADIW R30,1
0001b1 015f      	MOVW R10,R30
                 ; 0000 00A9 }
                 _0x2E:
0001b2 91e9      	LD   R30,Y+
0001b3 bfef      	OUT  SREG,R30
0001b4 91f9      	LD   R31,Y+
0001b5 91e9      	LD   R30,Y+
0001b6 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
0001b7 93ba      	ST   -Y,R27
0001b8 93aa      	ST   -Y,R26
0001b9 9724      	SBIW R28,4
0001ba e0e0      	LDI  R30,LOW(0)
0001bb 83e8      	ST   Y,R30
0001bc 83e9      	STD  Y+1,R30
0001bd 83ea      	STD  Y+2,R30
0001be e3ef      	LDI  R30,LOW(63)
0001bf 83eb      	STD  Y+3,R30
0001c0 931a      	ST   -Y,R17
0001c1 930a      	ST   -Y,R16
0001c2 85eb      	LDD  R30,Y+11
0001c3 85fc      	LDD  R31,Y+11+1
0001c4 3fef      	CPI  R30,LOW(0xFFFF)
0001c5 efaf      	LDI  R26,HIGH(0xFFFF)
0001c6 07fa      	CPC  R31,R26
0001c7 f439      	BRNE _0x200000D
0001c8 940e 0405 	CALL SUBOPT_0xC
                +
0001ca e5a8     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
0001cb e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
0001cc 940e 03ae 	CALL _strcpyf
0001ce c0ad      	RJMP _0x20A0004
                 _0x200000D:
0001cf 3fef      	CPI  R30,LOW(0x7FFF)
0001d0 e7af      	LDI  R26,HIGH(0x7FFF)
0001d1 07fa      	CPC  R31,R26
0001d2 f439      	BRNE _0x200000C
0001d3 940e 0405 	CALL SUBOPT_0xC
                +
0001d5 e5a9     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
0001d6 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
0001d7 940e 03ae 	CALL _strcpyf
0001d9 c0a2      	RJMP _0x20A0004
                 _0x200000C:
0001da 85ac      	LDD  R26,Y+12
0001db 23aa      	TST  R26
0001dc f462      	BRPL _0x200000F
                +
0001dd 85e9     +LDD R30 , Y + 9
0001de 85fa     +LDD R31 , Y + 9 + 1
0001df 856b     +LDD R22 , Y + 9 + 2
0001e0 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0001e1 940e 044b 	CALL __ANEGF1
0001e3 940e 040a 	CALL SUBOPT_0xD
0001e5 940e 040f 	CALL SUBOPT_0xE
0001e7 e2ed      	LDI  R30,LOW(45)
0001e8 93ec      	ST   X,R30
                 _0x200000F:
0001e9 85a8      	LDD  R26,Y+8
0001ea 30a7      	CPI  R26,LOW(0x7)
0001eb f010      	BRLO _0x2000010
0001ec e0e6      	LDI  R30,LOW(6)
0001ed 87e8      	STD  Y+8,R30
                 _0x2000010:
0001ee 8518      	LDD  R17,Y+8
                 _0x2000011:
0001ef 2fe1      	MOV  R30,R17
0001f0 5011      	SUBI R17,1
0001f1 30e0      	CPI  R30,0
0001f2 f029      	BREQ _0x2000013
0001f3 940e 0416 	CALL SUBOPT_0xF
0001f5 940e 041e 	CALL SUBOPT_0x10
0001f7 cff7      	RJMP _0x2000011
                 _0x2000013:
0001f8 940e 0423 	CALL SUBOPT_0x11
0001fa 940e 04f1 	CALL __ADDF12
0001fc 940e 040a 	CALL SUBOPT_0xD
0001fe e010      	LDI  R17,LOW(0)
                +
0001ff e0e0     +LDI R30 , LOW ( 0x3F800000 )
000200 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000201 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000202 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000203 940e 041e 	CALL SUBOPT_0x10
                 _0x2000014:
000205 940e 0423 	CALL SUBOPT_0x11
000207 940e 05d4 	CALL __CMPF12
000209 f088      	BRLO _0x2000016
00020a 940e 03fd 	CALL SUBOPT_0xA
00020c 940e 042c 	CALL SUBOPT_0x12
00020e 940e 041e 	CALL SUBOPT_0x10
000210 5f1f      	SUBI R17,-LOW(1)
000211 3217      	CPI  R17,39
000212 f038      	BRLO _0x2000017
000213 940e 0405 	CALL SUBOPT_0xC
                +
000215 e5ad     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
000216 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
000217 940e 03ae 	CALL _strcpyf
000219 c062      	RJMP _0x20A0004
                 _0x2000017:
00021a cfea      	RJMP _0x2000014
                 _0x2000016:
00021b 3010      	CPI  R17,0
00021c f429      	BRNE _0x2000018
00021d 940e 040f 	CALL SUBOPT_0xE
00021f e3e0      	LDI  R30,LOW(48)
000220 93ec      	ST   X,R30
000221 c02d      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
000222 2fe1      	MOV  R30,R17
000223 5011      	SUBI R17,1
000224 30e0      	CPI  R30,0
000225 f149      	BREQ _0x200001C
000226 940e 0416 	CALL SUBOPT_0xF
                +
000228 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000229 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00022a e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00022b e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00022c 940e 04f1 	CALL __ADDF12
00022e 01df      	MOVW R26,R30
00022f 01cb      	MOVW R24,R22
000230 940e 0397 	CALL _floor
000232 940e 041e 	CALL SUBOPT_0x10
000234 940e 0423 	CALL SUBOPT_0x11
000236 940e 058f 	CALL __DIVF21
000238 940e 047e 	CALL __CFD1U
00023a 2f0e      	MOV  R16,R30
00023b 940e 040f 	CALL SUBOPT_0xE
00023d 2fe0      	MOV  R30,R16
00023e 5de0      	SUBI R30,-LOW(48)
00023f 93ec      	ST   X,R30
000240 2fe0      	MOV  R30,R16
000241 e0f0      	LDI  R31,0
000242 940e 03fd 	CALL SUBOPT_0xA
000244 940e 03ec 	CALL SUBOPT_0x7
000246 940e 0541 	CALL __MULF12
000248 940e 0433 	CALL SUBOPT_0x13
00024a 940e 03f1 	CALL SUBOPT_0x8
00024c 940e 040a 	CALL SUBOPT_0xD
00024e cfd3      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
00024f 85e8      	LDD  R30,Y+8
000250 30e0      	CPI  R30,0
000251 f131      	BREQ _0x20A0003
000252 940e 040f 	CALL SUBOPT_0xE
000254 e2ee      	LDI  R30,LOW(46)
000255 93ec      	ST   X,R30
                 _0x200001E:
000256 85e8      	LDD  R30,Y+8
000257 50e1      	SUBI R30,LOW(1)
000258 87e8      	STD  Y+8,R30
000259 5fef      	SUBI R30,-LOW(1)
00025a f0e9      	BREQ _0x2000020
00025b 940e 0433 	CALL SUBOPT_0x13
00025d 940e 042c 	CALL SUBOPT_0x12
00025f 940e 040a 	CALL SUBOPT_0xD
                +
000261 85e9     +LDD R30 , Y + 9
000262 85fa     +LDD R31 , Y + 9 + 1
000263 856b     +LDD R22 , Y + 9 + 2
000264 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000265 940e 047e 	CALL __CFD1U
000267 2f0e      	MOV  R16,R30
000268 940e 040f 	CALL SUBOPT_0xE
00026a 2fe0      	MOV  R30,R16
00026b 5de0      	SUBI R30,-LOW(48)
00026c 93ec      	ST   X,R30
00026d 2fe0      	MOV  R30,R16
00026e e0f0      	LDI  R31,0
00026f 940e 0433 	CALL SUBOPT_0x13
000271 940e 03ec 	CALL SUBOPT_0x7
000273 940e 03f1 	CALL SUBOPT_0x8
000275 940e 040a 	CALL SUBOPT_0xD
000277 cfde      	RJMP _0x200001E
                 _0x2000020:
                 _0x20A0003:
000278 81ae      	LDD  R26,Y+6
000279 81bf      	LDD  R27,Y+6+1
00027a e0e0      	LDI  R30,LOW(0)
00027b 93ec      	ST   X,R30
                 _0x20A0004:
00027c 8119      	LDD  R17,Y+1
00027d 8108      	LDD  R16,Y+0
00027e 962d      	ADIW R28,13
00027f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
                 ; .FSTART __lcd_delay_G101
000280 e0ff          ldi   r31,15
                 __lcd_delay0:
000281 95fa          dec   r31
000282 f7f1          brne  __lcd_delay0
000283 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000284 b3a7          in    r26,__lcd_direction
000285 70af          andi  r26,0xf                 ;set as input
000286 bba7          out   __lcd_direction,r26
000287 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000288 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000289 dff6      	RCALL __lcd_delay_G101
00028a 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
00028b dff4      	RCALL __lcd_delay_G101
00028c b3a6          in    r26,__lcd_pin
00028d 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00028e dff1      	RCALL __lcd_delay_G101
00028f 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000290 dfef      	RCALL __lcd_delay_G101
000291 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000292 fda7          sbrc  r26,__lcd_busy_flag
000293 cff5          rjmp  __lcd_busy
000294 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000295 7fa0          andi  r26,0xf0
000296 2bab          or    r26,r27
000297 bba8          out   __lcd_port,r26          ;write
000298 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000299 940e 0280 	CALL __lcd_delay_G101
00029b 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00029c 940e 0280 	CALL __lcd_delay_G101
00029e 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00029f 93aa      	ST   -Y,R26
0002a0 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002a1 b3a7          in    r26,__lcd_direction
0002a2 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002a3 bba7          out   __lcd_direction,r26
0002a4 b3b8          in    r27,__lcd_port
0002a5 70bf          andi  r27,0xf
0002a6 81a8          ld    r26,y
0002a7 dfed      	RCALL __lcd_write_nibble_G101
0002a8 81a8          ld    r26,y
0002a9 95a2          swap  r26
0002aa dfea      	RCALL __lcd_write_nibble_G101
0002ab 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0002ac 940c 0364 	JMP  _0x20A0002
                 ; .FEND
                 __lcd_read_nibble_G101:
                 ; .FSTART __lcd_read_nibble_G101
0002ae 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0002af 940e 0280 	CALL __lcd_delay_G101
0002b1 b3e6          in    r30,__lcd_pin           ;read
0002b2 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0002b3 940e 0280 	CALL __lcd_delay_G101
0002b5 7fe0          andi  r30,0xf0
0002b6 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G101:
                 ; .FSTART _lcd_read_byte0_G101
0002b7 940e 0280 	CALL __lcd_delay_G101
0002b9 dff4      	RCALL __lcd_read_nibble_G101
0002ba 2fae          mov   r26,r30
0002bb dff2      	RCALL __lcd_read_nibble_G101
0002bc 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
0002bd 95e2          swap  r30
0002be 2bea          or    r30,r26
0002bf 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c0 93aa      	ST   -Y,R26
0002c1 940e 0284 	CALL __lcd_ready
0002c3 81e8      	LD   R30,Y
0002c4 e0f0      	LDI  R31,0
0002c5 59ec      	SUBI R30,LOW(-__base_y_G101)
0002c6 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002c7 81e0      	LD   R30,Z
0002c8 81a9      	LDD  R26,Y+1
0002c9 0fae      	ADD  R26,R30
0002ca 940e 029f 	CALL __lcd_write_data
0002cc 81e9      	LDD  R30,Y+1
0002cd 93e0 0268 	STS  __lcd_x,R30
0002cf 81e8      	LD   R30,Y
0002d0 93e0 0269 	STS  __lcd_y,R30
0002d2 9622      	ADIW R28,2
0002d3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d4 940e 0284 	CALL __lcd_ready
0002d6 e0a2      	LDI  R26,LOW(2)
0002d7 940e 029f 	CALL __lcd_write_data
0002d9 940e 0284 	CALL __lcd_ready
0002db e0ac      	LDI  R26,LOW(12)
0002dc 940e 029f 	CALL __lcd_write_data
0002de 940e 0284 	CALL __lcd_ready
0002e0 e0a1      	LDI  R26,LOW(1)
0002e1 940e 029f 	CALL __lcd_write_data
0002e3 e0e0      	LDI  R30,LOW(0)
0002e4 93e0 0269 	STS  __lcd_y,R30
0002e6 93e0 0268 	STS  __lcd_x,R30
0002e8 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002e9 93aa      	ST   -Y,R26
0002ea 93ef          push r30
0002eb 93ff          push r31
0002ec 81a8          ld   r26,y
0002ed 9468          set
0002ee 30aa          cpi  r26,10
0002ef f039          breq __lcd_putchar1
0002f0 94e8          clt
0002f1 91e0 026a 	LDS  R30,__lcd_maxx
0002f3 91a0 0268 	LDS  R26,__lcd_x
0002f5 17ae      	CP   R26,R30
0002f6 f058      	BRLO _0x2020004
                 	__lcd_putchar1:
0002f7 91e0 0269 	LDS  R30,__lcd_y
0002f9 5fef      	SUBI R30,-LOW(1)
0002fa 93e0 0269 	STS  __lcd_y,R30
0002fc e0e0      	LDI  R30,LOW(0)
0002fd 93ea      	ST   -Y,R30
0002fe 91a0 0269 	LDS  R26,__lcd_y
000300 dfbf      	RCALL _lcd_gotoxy
000301 f056      	brts __lcd_putchar0
                 _0x2020004:
000302 91e0 0268 	LDS  R30,__lcd_x
000304 5fef      	SUBI R30,-LOW(1)
000305 93e0 0268 	STS  __lcd_x,R30
000307 df7c          rcall __lcd_ready
000308 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000309 81a8      	LD   R26,Y
00030a 940e 029f 	CALL __lcd_write_data
                 __lcd_putchar0:
00030c 91ff          pop  r31
00030d 91ef          pop  r30
00030e 940c 0364 	JMP  _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000310 93ba      	ST   -Y,R27
000311 93aa      	ST   -Y,R26
000312 931a      	ST   -Y,R17
                 _0x2020005:
000313 81a9      	LDD  R26,Y+1
000314 81ba      	LDD  R27,Y+1+1
000315 91ed      	LD   R30,X+
000316 83a9      	STD  Y+1,R26
000317 83ba      	STD  Y+1+1,R27
000318 2f1e      	MOV  R17,R30
000319 30e0      	CPI  R30,0
00031a f019      	BREQ _0x2020007
00031b 2fa1      	MOV  R26,R17
00031c dfcc      	RCALL _lcd_putchar
00031d cff5      	RJMP _0x2020005
                 _0x2020007:
00031e 8118      	LDD  R17,Y+0
00031f 9623      	ADIW R28,3
000320 9508      	RET
                 ; .FEND
                 __long_delay_G101:
                 ; .FSTART __long_delay_G101
000321 27aa          clr   r26
000322 27bb          clr   r27
                 __long_delay0:
000323 9711          sbiw  r26,1         ;2 cycles
000324 f7f1          brne  __long_delay0 ;2 cycles
000325 9508      	RET
                 ; .FEND
                 __lcd_init_write_G101:
                 ; .FSTART __lcd_init_write_G101
000326 93aa      	ST   -Y,R26
000327 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000328 b3a7          in    r26,__lcd_direction
000329 6fa7          ori   r26,0xf7                ;set as output
00032a bba7          out   __lcd_direction,r26
00032b b3b8          in    r27,__lcd_port
00032c 70bf          andi  r27,0xf
00032d 81a8          ld    r26,y
00032e 940e 0295 	CALL __lcd_write_nibble_G101
000330 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000331 c032      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000332 93aa      	ST   -Y,R26
000333 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000334 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000335 81e8      	LD   R30,Y
000336 93e0 026a 	STS  __lcd_maxx,R30
000338 58e0      	SUBI R30,-LOW(128)
                +
000339 93e0 0266+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00033b 81e8      	LD   R30,Y
00033c 54e0      	SUBI R30,-LOW(192)
                +
00033d 93e0 0267+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00033f 940e 0438 	CALL SUBOPT_0x14
000341 940e 0438 	CALL SUBOPT_0x14
000343 940e 0438 	CALL SUBOPT_0x14
000345 dfdb      	RCALL __long_delay_G101
000346 e2a0      	LDI  R26,LOW(32)
000347 dfde      	RCALL __lcd_init_write_G101
000348 dfd8      	RCALL __long_delay_G101
000349 e2a8      	LDI  R26,LOW(40)
00034a 940e 043d 	CALL SUBOPT_0x15
00034c e0a4      	LDI  R26,LOW(4)
00034d 940e 043d 	CALL SUBOPT_0x15
00034f e8a5      	LDI  R26,LOW(133)
000350 940e 043d 	CALL SUBOPT_0x15
000352 b3a7          in    r26,__lcd_direction
000353 70af          andi  r26,0xf                 ;set as input
000354 bba7          out   __lcd_direction,r26
000355 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000356 940e 02b7 	CALL _lcd_read_byte0_G101
000358 30e5      	CPI  R30,LOW(0x5)
000359 f011      	BREQ _0x202000B
00035a e0e0      	LDI  R30,LOW(0)
00035b c008      	RJMP _0x20A0002
                 _0x202000B:
00035c 940e 0284 	CALL __lcd_ready
00035e e0a6      	LDI  R26,LOW(6)
00035f 940e 029f 	CALL __lcd_write_data
000361 940e 02d4 	CALL _lcd_clear
000363 e0e1      	LDI  R30,LOW(1)
                 _0x20A0002:
000364 9621      	ADIW R28,1
000365 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000366 940e 0626 	CALL __PUTPARD2
000368 817b         ldd  r23,y+3
000369 816a         ldd  r22,y+2
00036a 81f9         ldd  r31,y+1
00036b 81e8         ld   r30,y
00036c fb77         bst  r23,7
00036d 0f77         lsl  r23
00036e fd67         sbrc r22,7
00036f 6071         sbr  r23,1
000370 2f97         mov  r25,r23
000371 579e         subi r25,0x7e
000372 f081         breq __ftrunc0
000373 f078         brcs __ftrunc0
000374 3198         cpi  r25,24
000375 f490         brsh __ftrunc1
000376 27aa         clr  r26
000377 27bb         clr  r27
000378 2788         clr  r24
                 __ftrunc2:
000379 9408         sec
00037a 9587         ror  r24
00037b 95b7         ror  r27
00037c 95a7         ror  r26
00037d 959a         dec  r25
00037e f7d1         brne __ftrunc2
00037f 23ea         and  r30,r26
000380 23fb         and  r31,r27
000381 2368         and  r22,r24
000382 c005         rjmp __ftrunc1
                 __ftrunc0:
000383 94e8         clt
000384 2777         clr  r23
000385 27ee         clr  r30
000386 27ff         clr  r31
000387 2766         clr  r22
                 __ftrunc1:
000388 776f         cbr  r22,0x80
000389 9576         lsr  r23
00038a f408         brcc __ftrunc3
00038b 6860         sbr  r22,0x80
                 __ftrunc3:
00038c f977         bld  r23,7
00038d 91a9         ld   r26,y+
00038e 91b9         ld   r27,y+
00038f 9189         ld   r24,y+
000390 9199         ld   r25,y+
000391 17ea         cp   r30,r26
000392 07fb         cpc  r31,r27
000393 0768         cpc  r22,r24
000394 0779         cpc  r23,r25
000395 fb97         bst  r25,7
000396 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000397 940e 0626 	CALL __PUTPARD2
000399 940e 03c3 	CALL SUBOPT_0x2
00039b 940e 0366 	CALL _ftrunc
00039d 940e 03c0 	CALL SUBOPT_0x1
00039f f419          brne __floor1
                 __floor0:
0003a0 940e 0402 	CALL SUBOPT_0xB
0003a2 c009      	RJMP _0x20A0001
                 __floor1:
0003a3 f7e6          brtc __floor0
0003a4 940e 0402 	CALL SUBOPT_0xB
                +
0003a6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0003a7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0003a8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0003a9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0003aa 940e 04ea 	CALL __SUBF12
                 _0x20A0001:
0003ac 9624      	ADIW R28,4
0003ad 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0003ae 93ba      	ST   -Y,R27
0003af 93aa      	ST   -Y,R26
0003b0 91e9          ld   r30,y+
0003b1 91f9          ld   r31,y+
0003b2 91a9          ld   r26,y+
0003b3 91b9          ld   r27,y+
0003b4 01cd          movw r24,r26
                 strcpyf0:
0003b5 9005      	lpm  r0,z+
0003b6 920d          st   x+,r0
0003b7 2000          tst  r0
0003b8 f7e1          brne strcpyf0
0003b9 01fc          movw r30,r24
0003ba 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __seed_G100:
000260           	.BYTE 0x4
                 __base_y_G101:
000264           	.BYTE 0x4
                 __lcd_x:
000268           	.BYTE 0x1
                 __lcd_y:
000269           	.BYTE 0x1
                 __lcd_maxx:
00026a           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003bb 2766      	CLR  R22
0003bc 2777      	CLR  R23
0003bd 940e 04b7 	CALL __CDF1
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003c0 940e 061c 	CALL __PUTD1S0
0003c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0003c3 940e 0617 	CALL __GETD2S0
0003c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003c6 dff4      	RCALL SUBOPT_0x0
0003c7 940e 0621 	CALL __PUTPARD1
0003c9 e0e2      	LDI  R30,LOW(2)
0003ca 93ea      	ST   -Y,R30
0003cb 01de      	MOVW R26,R28
0003cc 9619      	ADIW R26,9
0003cd 940e 01b7 	CALL _ftoa
0003cf 01de      	MOVW R26,R28
0003d0 9614      	ADIW R26,4
0003d1 940c 0310 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0003d3 dfef      	RCALL SUBOPT_0x2
                +
0003d4 e6e6     +LDI R30 , LOW ( 0x3EE66666 )
0003d5 e6f6     +LDI R31 , HIGH ( 0x3EE66666 )
0003d6 ee66     +LDI R22 , BYTE3 ( 0x3EE66666 )
0003d7 e37e     +LDI R23 , BYTE4 ( 0x3EE66666 )
                 	__GETD1N 0x3EE66666
0003d8 940e 05d4 	CALL __CMPF12
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0003db 01d3      	MOVW R26,R6
0003dc e0e7      	LDI  R30,LOW(7)
0003dd e0f0      	LDI  R31,HIGH(7)
0003de 940e 060c 	CALL __GTW12U
0003e0 2e0e      	MOV  R0,R30
0003e1 e1e2      	LDI  R30,LOW(18)
0003e2 e0f0      	LDI  R31,HIGH(18)
0003e3 940e 0606 	CALL __LTW12U
0003e5 21e0      	AND  R30,R0
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
                +
0003e7 81ac     +LDD R26 , Y + 4
0003e8 81bd     +LDD R27 , Y + 4 + 1
0003e9 818e     +LDD R24 , Y + 4 + 2
0003ea 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0003eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003ec 940e 05fc 	CALL __CWD1
0003ee 940e 04b7 	CALL __CDF1
0003f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003f1 940e 0630 	CALL __SWAPD12
0003f3 940e 04ea 	CALL __SUBF12
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
0003f6 e0e0     +LDI R30 , LOW ( 0x41200000 )
0003f7 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0003f8 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0003f9 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0003fa 940e 04ea 	CALL __SUBF12
0003fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
                +
0003fd 81aa     +LDD R26 , Y + 2
0003fe 81bb     +LDD R27 , Y + 2 + 1
0003ff 818c     +LDD R24 , Y + 2 + 2
000400 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000401 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000402 940e 0612 	CALL __GETD1S0
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000405 81ee      	LDD  R30,Y+6
000406 81ff      	LDD  R31,Y+6+1
000407 93fa      	ST   -Y,R31
000408 93ea      	ST   -Y,R30
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
                +
00040a 87e9     +STD Y + 9 , R30
00040b 87fa     +STD Y + 9 + 1 , R31
00040c 876b     +STD Y + 9 + 2 , R22
00040d 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
00040f 81ae      	LDD  R26,Y+6
000410 81bf      	LDD  R27,Y+6+1
000411 9611      	ADIW R26,1
000412 83ae      	STD  Y+6,R26
000413 83bf      	STD  Y+6+1,R27
000414 9711      	SBIW R26,1
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
000416 dfe6      	RCALL SUBOPT_0xA
                +
000417 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000418 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000419 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00041a e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00041b 940e 0541 	CALL __MULF12
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
                +
00041e 83ea     +STD Y + 2 , R30
00041f 83fb     +STD Y + 2 + 1 , R31
000420 836c     +STD Y + 2 + 2 , R22
000421 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
                +
000423 81ea     +LDD R30 , Y + 2
000424 81fb     +LDD R31 , Y + 2 + 1
000425 816c     +LDD R22 , Y + 2 + 2
000426 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000427 85a9     +LDD R26 , Y + 9
000428 85ba     +LDD R27 , Y + 9 + 1
000429 858b     +LDD R24 , Y + 9 + 2
00042a 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00042b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
                +
00042c e0e0     +LDI R30 , LOW ( 0x41200000 )
00042d e0f0     +LDI R31 , HIGH ( 0x41200000 )
00042e e260     +LDI R22 , BYTE3 ( 0x41200000 )
00042f e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000430 940e 0541 	CALL __MULF12
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
000433 85a9     +LDD R26 , Y + 9
000434 85ba     +LDD R27 , Y + 9 + 1
000435 858b     +LDD R24 , Y + 9 + 2
000436 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000437 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000438 940e 0321 	CALL __long_delay_G101
00043a e3a0      	LDI  R26,LOW(48)
00043b 940c 0326 	JMP  __lcd_init_write_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00043d 940e 029f 	CALL __lcd_write_data
00043f 940c 0321 	JMP  __long_delay_G101
                 
                 
                 	.CSEG
                 _delay_ms:
000441 9610      	adiw r26,0
000442 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000443 ed80     +LDI R24 , LOW ( 0x7D0 )
000444 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000445 9701     +SBIW R24 , 1
000446 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000447 95a8      	wdr
000448 9711      	sbiw r26,1
000449 f7c9      	brne __delay_ms0
                 __delay_ms1:
00044a 9508      	ret
                 
                 __ANEGF1:
00044b 9730      	SBIW R30,0
00044c 4060      	SBCI R22,0
00044d 4070      	SBCI R23,0
00044e f009      	BREQ __ANEGF10
00044f 5870      	SUBI R23,0x80
                 __ANEGF10:
000450 9508      	RET
                 
                 __ROUND_REPACK:
000451 2355      	TST  R21
000452 f442      	BRPL __REPACK
000453 3850      	CPI  R21,0x80
000454 f411      	BRNE __ROUND_REPACK0
000455 ffe0      	SBRS R30,0
000456 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000457 9631      	ADIW R30,1
000458 1f69      	ADC  R22,R25
000459 1f79      	ADC  R23,R25
00045a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00045b e850      	LDI  R21,0x80
00045c 2757      	EOR  R21,R23
00045d f411      	BRNE __REPACK0
00045e 935f      	PUSH R21
00045f c0cf      	RJMP __ZERORES
                 __REPACK0:
000460 3f5f      	CPI  R21,0xFF
000461 f031      	BREQ __REPACK1
000462 0f66      	LSL  R22
000463 0c00      	LSL  R0
000464 9557      	ROR  R21
000465 9567      	ROR  R22
000466 2f75      	MOV  R23,R21
000467 9508      	RET
                 __REPACK1:
000468 935f      	PUSH R21
000469 2000      	TST  R0
00046a f00a      	BRMI __REPACK2
00046b c0cf      	RJMP __MAXRES
                 __REPACK2:
00046c c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00046d e850      	LDI  R21,0x80
00046e 2e19      	MOV  R1,R25
00046f 2215      	AND  R1,R21
000470 0f88      	LSL  R24
000471 1f99      	ROL  R25
000472 2795      	EOR  R25,R21
000473 0f55      	LSL  R21
000474 9587      	ROR  R24
                 
                 __UNPACK1:
000475 e850      	LDI  R21,0x80
000476 2e07      	MOV  R0,R23
000477 2205      	AND  R0,R21
000478 0f66      	LSL  R22
000479 1f77      	ROL  R23
00047a 2775      	EOR  R23,R21
00047b 0f55      	LSL  R21
00047c 9567      	ROR  R22
00047d 9508      	RET
                 
                 __CFD1U:
00047e 9468      	SET
00047f c001      	RJMP __CFD1U0
                 __CFD1:
000480 94e8      	CLT
                 __CFD1U0:
000481 935f      	PUSH R21
000482 dff2      	RCALL __UNPACK1
000483 3870      	CPI  R23,0x80
000484 f018      	BRLO __CFD10
000485 3f7f      	CPI  R23,0xFF
000486 f408      	BRCC __CFD10
000487 c0a7      	RJMP __ZERORES
                 __CFD10:
000488 e156      	LDI  R21,22
000489 1b57      	SUB  R21,R23
00048a f4aa      	BRPL __CFD11
00048b 9551      	NEG  R21
00048c 3058      	CPI  R21,8
00048d f40e      	BRTC __CFD19
00048e 3059      	CPI  R21,9
                 __CFD19:
00048f f030      	BRLO __CFD17
000490 efef      	SER  R30
000491 efff      	SER  R31
000492 ef6f      	SER  R22
000493 e77f      	LDI  R23,0x7F
000494 f977      	BLD  R23,7
000495 c01a      	RJMP __CFD15
                 __CFD17:
000496 2777      	CLR  R23
000497 2355      	TST  R21
000498 f0b9      	BREQ __CFD15
                 __CFD18:
000499 0fee      	LSL  R30
00049a 1fff      	ROL  R31
00049b 1f66      	ROL  R22
00049c 1f77      	ROL  R23
00049d 955a      	DEC  R21
00049e f7d1      	BRNE __CFD18
00049f c010      	RJMP __CFD15
                 __CFD11:
0004a0 2777      	CLR  R23
                 __CFD12:
0004a1 3058      	CPI  R21,8
0004a2 f028      	BRLO __CFD13
0004a3 2fef      	MOV  R30,R31
0004a4 2ff6      	MOV  R31,R22
0004a5 2f67      	MOV  R22,R23
0004a6 5058      	SUBI R21,8
0004a7 cff9      	RJMP __CFD12
                 __CFD13:
0004a8 2355      	TST  R21
0004a9 f031      	BREQ __CFD15
                 __CFD14:
0004aa 9576      	LSR  R23
0004ab 9567      	ROR  R22
0004ac 95f7      	ROR  R31
0004ad 95e7      	ROR  R30
0004ae 955a      	DEC  R21
0004af f7d1      	BRNE __CFD14
                 __CFD15:
0004b0 2000      	TST  R0
0004b1 f40a      	BRPL __CFD16
0004b2 d141      	RCALL __ANEGD1
                 __CFD16:
0004b3 915f      	POP  R21
0004b4 9508      	RET
                 
                 __CDF1U:
0004b5 9468      	SET
0004b6 c001      	RJMP __CDF1U0
                 __CDF1:
0004b7 94e8      	CLT
                 __CDF1U0:
0004b8 9730      	SBIW R30,0
0004b9 4060      	SBCI R22,0
0004ba 4070      	SBCI R23,0
0004bb f0b1      	BREQ __CDF10
0004bc 2400      	CLR  R0
0004bd f026      	BRTS __CDF11
0004be 2377      	TST  R23
0004bf f412      	BRPL __CDF11
0004c0 9400      	COM  R0
0004c1 d132      	RCALL __ANEGD1
                 __CDF11:
0004c2 2e17      	MOV  R1,R23
0004c3 e17e      	LDI  R23,30
0004c4 2011      	TST  R1
                 __CDF12:
0004c5 f032      	BRMI __CDF13
0004c6 957a      	DEC  R23
0004c7 0fee      	LSL  R30
0004c8 1fff      	ROL  R31
0004c9 1f66      	ROL  R22
0004ca 1c11      	ROL  R1
0004cb cff9      	RJMP __CDF12
                 __CDF13:
0004cc 2fef      	MOV  R30,R31
0004cd 2ff6      	MOV  R31,R22
0004ce 2d61      	MOV  R22,R1
0004cf 935f      	PUSH R21
0004d0 df8a      	RCALL __REPACK
0004d1 915f      	POP  R21
                 __CDF10:
0004d2 9508      	RET
                 
                 __SWAPACC:
0004d3 934f      	PUSH R20
0004d4 01af      	MOVW R20,R30
0004d5 01fd      	MOVW R30,R26
0004d6 01da      	MOVW R26,R20
0004d7 01ab      	MOVW R20,R22
0004d8 01bc      	MOVW R22,R24
0004d9 01ca      	MOVW R24,R20
0004da 2d40      	MOV  R20,R0
0004db 2c01      	MOV  R0,R1
0004dc 2e14      	MOV  R1,R20
0004dd 914f      	POP  R20
0004de 9508      	RET
                 
                 __UADD12:
0004df 0fea      	ADD  R30,R26
0004e0 1ffb      	ADC  R31,R27
0004e1 1f68      	ADC  R22,R24
0004e2 9508      	RET
                 
                 __NEGMAN1:
0004e3 95e0      	COM  R30
0004e4 95f0      	COM  R31
0004e5 9560      	COM  R22
0004e6 5fef      	SUBI R30,-1
0004e7 4fff      	SBCI R31,-1
0004e8 4f6f      	SBCI R22,-1
0004e9 9508      	RET
                 
                 __SUBF12:
0004ea 935f      	PUSH R21
0004eb df81      	RCALL __UNPACK
0004ec 3890      	CPI  R25,0x80
0004ed f171      	BREQ __ADDF129
0004ee e850      	LDI  R21,0x80
0004ef 2615      	EOR  R1,R21
                 
0004f0 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0004f1 935f      	PUSH R21
0004f2 df7a      	RCALL __UNPACK
0004f3 3890      	CPI  R25,0x80
0004f4 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0004f5 3870      	CPI  R23,0x80
0004f6 f121      	BREQ __ADDF128
                 __ADDF121:
0004f7 2f57      	MOV  R21,R23
0004f8 1b59      	SUB  R21,R25
0004f9 f12b      	BRVS __ADDF1211
0004fa f412      	BRPL __ADDF122
0004fb dfd7      	RCALL __SWAPACC
0004fc cffa      	RJMP __ADDF121
                 __ADDF122:
0004fd 3158      	CPI  R21,24
0004fe f018      	BRLO __ADDF123
0004ff 27aa      	CLR  R26
000500 27bb      	CLR  R27
000501 2788      	CLR  R24
                 __ADDF123:
000502 3058      	CPI  R21,8
000503 f028      	BRLO __ADDF124
000504 2fab      	MOV  R26,R27
000505 2fb8      	MOV  R27,R24
000506 2788      	CLR  R24
000507 5058      	SUBI R21,8
000508 cff9      	RJMP __ADDF123
                 __ADDF124:
000509 2355      	TST  R21
00050a f029      	BREQ __ADDF126
                 __ADDF125:
00050b 9586      	LSR  R24
00050c 95b7      	ROR  R27
00050d 95a7      	ROR  R26
00050e 955a      	DEC  R21
00050f f7d9      	BRNE __ADDF125
                 __ADDF126:
000510 2d50      	MOV  R21,R0
000511 2551      	EOR  R21,R1
000512 f072      	BRMI __ADDF127
000513 dfcb      	RCALL __UADD12
000514 f438      	BRCC __ADDF129
000515 9567      	ROR  R22
000516 95f7      	ROR  R31
000517 95e7      	ROR  R30
000518 9573      	INC  R23
000519 f413      	BRVC __ADDF129
00051a c020      	RJMP __MAXRES
                 __ADDF128:
00051b dfb7      	RCALL __SWAPACC
                 __ADDF129:
00051c df3e      	RCALL __REPACK
00051d 915f      	POP  R21
00051e 9508      	RET
                 __ADDF1211:
00051f f7d8      	BRCC __ADDF128
000520 cffb      	RJMP __ADDF129
                 __ADDF127:
000521 1bea      	SUB  R30,R26
000522 0bfb      	SBC  R31,R27
000523 0b68      	SBC  R22,R24
000524 f051      	BREQ __ZERORES
000525 f410      	BRCC __ADDF1210
000526 9400      	COM  R0
000527 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000528 2366      	TST  R22
000529 f392      	BRMI __ADDF129
00052a 0fee      	LSL  R30
00052b 1fff      	ROL  R31
00052c 1f66      	ROL  R22
00052d 957a      	DEC  R23
00052e f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00052f 27ee      	CLR  R30
000530 27ff      	CLR  R31
000531 2766      	CLR  R22
000532 2777      	CLR  R23
000533 915f      	POP  R21
000534 9508      	RET
                 
                 __MINRES:
000535 efef      	SER  R30
000536 efff      	SER  R31
000537 e76f      	LDI  R22,0x7F
000538 ef7f      	SER  R23
000539 915f      	POP  R21
00053a 9508      	RET
                 
                 __MAXRES:
00053b efef      	SER  R30
00053c efff      	SER  R31
00053d e76f      	LDI  R22,0x7F
00053e e77f      	LDI  R23,0x7F
00053f 915f      	POP  R21
000540 9508      	RET
                 
                 __MULF12:
000541 935f      	PUSH R21
000542 df2a      	RCALL __UNPACK
000543 3870      	CPI  R23,0x80
000544 f351      	BREQ __ZERORES
000545 3890      	CPI  R25,0x80
000546 f341      	BREQ __ZERORES
000547 2401      	EOR  R0,R1
000548 9408      	SEC
000549 1f79      	ADC  R23,R25
00054a f423      	BRVC __MULF124
00054b f31c      	BRLT __ZERORES
                 __MULF125:
00054c 2000      	TST  R0
00054d f33a      	BRMI __MINRES
00054e cfec      	RJMP __MAXRES
                 __MULF124:
00054f 920f      	PUSH R0
000550 931f      	PUSH R17
000551 932f      	PUSH R18
000552 933f      	PUSH R19
000553 934f      	PUSH R20
000554 2711      	CLR  R17
000555 2722      	CLR  R18
000556 2799      	CLR  R25
000557 9f68      	MUL  R22,R24
000558 01a0      	MOVW R20,R0
000559 9f8f      	MUL  R24,R31
00055a 2d30      	MOV  R19,R0
00055b 0d41      	ADD  R20,R1
00055c 1f59      	ADC  R21,R25
00055d 9f6b      	MUL  R22,R27
00055e 0d30      	ADD  R19,R0
00055f 1d41      	ADC  R20,R1
000560 1f59      	ADC  R21,R25
000561 9f8e      	MUL  R24,R30
000562 d027      	RCALL __MULF126
000563 9fbf      	MUL  R27,R31
000564 d025      	RCALL __MULF126
000565 9f6a      	MUL  R22,R26
000566 d023      	RCALL __MULF126
000567 9fbe      	MUL  R27,R30
000568 d01d      	RCALL __MULF127
000569 9faf      	MUL  R26,R31
00056a d01b      	RCALL __MULF127
00056b 9fae      	MUL  R26,R30
00056c 0d11      	ADD  R17,R1
00056d 1f29      	ADC  R18,R25
00056e 1f39      	ADC  R19,R25
00056f 1f49      	ADC  R20,R25
000570 1f59      	ADC  R21,R25
000571 2fe3      	MOV  R30,R19
000572 2ff4      	MOV  R31,R20
000573 2f65      	MOV  R22,R21
000574 2f52      	MOV  R21,R18
000575 914f      	POP  R20
000576 913f      	POP  R19
000577 912f      	POP  R18
000578 911f      	POP  R17
000579 900f      	POP  R0
00057a 2366      	TST  R22
00057b f02a      	BRMI __MULF122
00057c 0f55      	LSL  R21
00057d 1fee      	ROL  R30
00057e 1fff      	ROL  R31
00057f 1f66      	ROL  R22
000580 c002      	RJMP __MULF123
                 __MULF122:
000581 9573      	INC  R23
000582 f24b      	BRVS __MULF125
                 __MULF123:
000583 decd      	RCALL __ROUND_REPACK
000584 915f      	POP  R21
000585 9508      	RET
                 
                 __MULF127:
000586 0d10      	ADD  R17,R0
000587 1d21      	ADC  R18,R1
000588 1f39      	ADC  R19,R25
000589 c002      	RJMP __MULF128
                 __MULF126:
00058a 0d20      	ADD  R18,R0
00058b 1d31      	ADC  R19,R1
                 __MULF128:
00058c 1f49      	ADC  R20,R25
00058d 1f59      	ADC  R21,R25
00058e 9508      	RET
                 
                 __DIVF21:
00058f 935f      	PUSH R21
000590 dedc      	RCALL __UNPACK
000591 3870      	CPI  R23,0x80
000592 f421      	BRNE __DIVF210
000593 2011      	TST  R1
                 __DIVF211:
000594 f40a      	BRPL __DIVF219
000595 cf9f      	RJMP __MINRES
                 __DIVF219:
000596 cfa4      	RJMP __MAXRES
                 __DIVF210:
000597 3890      	CPI  R25,0x80
000598 f409      	BRNE __DIVF218
                 __DIVF217:
000599 cf95      	RJMP __ZERORES
                 __DIVF218:
00059a 2401      	EOR  R0,R1
00059b 9408      	SEC
00059c 0b97      	SBC  R25,R23
00059d f41b      	BRVC __DIVF216
00059e f3d4      	BRLT __DIVF217
00059f 2000      	TST  R0
0005a0 cff3      	RJMP __DIVF211
                 __DIVF216:
0005a1 2f79      	MOV  R23,R25
0005a2 931f      	PUSH R17
0005a3 932f      	PUSH R18
0005a4 933f      	PUSH R19
0005a5 934f      	PUSH R20
0005a6 2411      	CLR  R1
0005a7 2711      	CLR  R17
0005a8 2722      	CLR  R18
0005a9 2733      	CLR  R19
0005aa 2744      	CLR  R20
0005ab 2755      	CLR  R21
0005ac e290      	LDI  R25,32
                 __DIVF212:
0005ad 17ae      	CP   R26,R30
0005ae 07bf      	CPC  R27,R31
0005af 0786      	CPC  R24,R22
0005b0 0741      	CPC  R20,R17
0005b1 f030      	BRLO __DIVF213
0005b2 1bae      	SUB  R26,R30
0005b3 0bbf      	SBC  R27,R31
0005b4 0b86      	SBC  R24,R22
0005b5 0b41      	SBC  R20,R17
0005b6 9408      	SEC
0005b7 c001      	RJMP __DIVF214
                 __DIVF213:
0005b8 9488      	CLC
                 __DIVF214:
0005b9 1f55      	ROL  R21
0005ba 1f22      	ROL  R18
0005bb 1f33      	ROL  R19
0005bc 1c11      	ROL  R1
0005bd 1faa      	ROL  R26
0005be 1fbb      	ROL  R27
0005bf 1f88      	ROL  R24
0005c0 1f44      	ROL  R20
0005c1 959a      	DEC  R25
0005c2 f751      	BRNE __DIVF212
0005c3 01f9      	MOVW R30,R18
0005c4 2d61      	MOV  R22,R1
0005c5 914f      	POP  R20
0005c6 913f      	POP  R19
0005c7 912f      	POP  R18
0005c8 911f      	POP  R17
0005c9 2366      	TST  R22
0005ca f032      	BRMI __DIVF215
0005cb 0f55      	LSL  R21
0005cc 1fee      	ROL  R30
0005cd 1fff      	ROL  R31
0005ce 1f66      	ROL  R22
0005cf 957a      	DEC  R23
0005d0 f243      	BRVS __DIVF217
                 __DIVF215:
0005d1 de7f      	RCALL __ROUND_REPACK
0005d2 915f      	POP  R21
0005d3 9508      	RET
                 
                 __CMPF12:
0005d4 2399      	TST  R25
0005d5 f09a      	BRMI __CMPF120
0005d6 2377      	TST  R23
0005d7 f042      	BRMI __CMPF121
0005d8 1797      	CP   R25,R23
0005d9 f048      	BRLO __CMPF122
0005da f429      	BRNE __CMPF121
0005db 17ae      	CP   R26,R30
0005dc 07bf      	CPC  R27,R31
0005dd 0786      	CPC  R24,R22
0005de f020      	BRLO __CMPF122
0005df f031      	BREQ __CMPF123
                 __CMPF121:
0005e0 9498      	CLZ
0005e1 9488      	CLC
0005e2 9508      	RET
                 __CMPF122:
0005e3 9498      	CLZ
0005e4 9408      	SEC
0005e5 9508      	RET
                 __CMPF123:
0005e6 9418      	SEZ
0005e7 9488      	CLC
0005e8 9508      	RET
                 __CMPF120:
0005e9 2377      	TST  R23
0005ea f7c2      	BRPL __CMPF122
0005eb 1797      	CP   R25,R23
0005ec f398      	BRLO __CMPF121
0005ed f7a9      	BRNE __CMPF122
0005ee 17ea      	CP   R30,R26
0005ef 07fb      	CPC  R31,R27
0005f0 0768      	CPC  R22,R24
0005f1 f388      	BRLO __CMPF122
0005f2 f399      	BREQ __CMPF123
0005f3 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
0005f4 95f0      	COM  R31
0005f5 9560      	COM  R22
0005f6 9570      	COM  R23
0005f7 95e1      	NEG  R30
0005f8 4fff      	SBCI R31,-1
0005f9 4f6f      	SBCI R22,-1
0005fa 4f7f      	SBCI R23,-1
0005fb 9508      	RET
                 
                 __CWD1:
0005fc 2f6f      	MOV  R22,R31
0005fd 0f66      	ADD  R22,R22
0005fe 0b66      	SBC  R22,R22
0005ff 2f76      	MOV  R23,R22
000600 9508      	RET
                 
                 __CWD2:
000601 2f8b      	MOV  R24,R27
000602 0f88      	ADD  R24,R24
000603 0b88      	SBC  R24,R24
000604 2f98      	MOV  R25,R24
000605 9508      	RET
                 
                 __LTW12U:
000606 17ae      	CP   R26,R30
000607 07bf      	CPC  R27,R31
000608 e0e1      	LDI  R30,1
000609 f008      	BRLO __LTW12UT
00060a 27ee      	CLR  R30
                 __LTW12UT:
00060b 9508      	RET
                 
                 __GTW12U:
00060c 17ea      	CP   R30,R26
00060d 07fb      	CPC  R31,R27
00060e e0e1      	LDI  R30,1
00060f f008      	BRLO __GTW12UT
000610 27ee      	CLR  R30
                 __GTW12UT:
000611 9508      	RET
                 
                 __GETD1S0:
000612 81e8      	LD   R30,Y
000613 81f9      	LDD  R31,Y+1
000614 816a      	LDD  R22,Y+2
000615 817b      	LDD  R23,Y+3
000616 9508      	RET
                 
                 __GETD2S0:
000617 81a8      	LD   R26,Y
000618 81b9      	LDD  R27,Y+1
000619 818a      	LDD  R24,Y+2
00061a 819b      	LDD  R25,Y+3
00061b 9508      	RET
                 
                 __PUTD1S0:
00061c 83e8      	ST   Y,R30
00061d 83f9      	STD  Y+1,R31
00061e 836a      	STD  Y+2,R22
00061f 837b      	STD  Y+3,R23
000620 9508      	RET
                 
                 __PUTPARD1:
000621 937a      	ST   -Y,R23
000622 936a      	ST   -Y,R22
000623 93fa      	ST   -Y,R31
000624 93ea      	ST   -Y,R30
000625 9508      	RET
                 
                 __PUTPARD2:
000626 939a      	ST   -Y,R25
000627 938a      	ST   -Y,R24
000628 93ba      	ST   -Y,R27
000629 93aa      	ST   -Y,R26
00062a 9508      	RET
                 
                 __CDF2U:
00062b 9468      	SET
00062c c001      	RJMP __CDF2U0
                 __CDF2:
00062d 94e8      	CLT
                 __CDF2U0:
00062e d001      	RCALL __SWAPD12
00062f de88      	RCALL __CDF1U0
                 
                 __SWAPD12:
000630 2e18      	MOV  R1,R24
000631 2f86      	MOV  R24,R22
000632 2d61      	MOV  R22,R1
000633 2e19      	MOV  R1,R25
000634 2f97      	MOV  R25,R23
000635 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000636 2e1b      	MOV  R1,R27
000637 2fbf      	MOV  R27,R31
000638 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000639 2e1a      	MOV  R1,R26
00063a 2fae      	MOV  R26,R30
00063b 2de1      	MOV  R30,R1
00063c 9508      	RET
                 
                 __SAVELOCR4:
00063d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00063e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00063f 931a      	ST   -Y,R17
000640 930a      	ST   -Y,R16
000641 9508      	RET
                 
                 __LOADLOCR4:
000642 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000643 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000644 8119      	LDD  R17,Y+1
000645 8108      	LD   R16,Y
000646 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  34 r1 :  30 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   6 r7 :   2 
r8 :   5 r9 :   2 r10:   4 r11:   2 r12:   7 r13:   4 r14:   0 r15:   0 
r16:  24 r17:  31 r18:  19 r19:  15 r20:  22 r21:  63 r22:  80 r23:  74 
r24:  56 r25:  51 r26: 129 r27:  54 r28:  14 r29:   1 r30: 241 r31:  88 
x  :  11 y  : 163 z  :   9 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  10 
adiw  :  17 and   :   6 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  27 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   9 brne  :  28 brpl  :   8 brsh  :   2 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 call  : 156 
cbi   :  14 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  44 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  15 cpc   :  21 cpi   :  29 cpse  :   0 dec   :  11 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :   2 jmp   :  29 ld    :  27 ldd   :  74 ldi   : 139 
lds   :   5 lpm   :   8 lsl   :  12 lsr   :   3 mov   :  53 movw  :  46 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   3 out   :  22 pop   :  20 push  :  20 rcall :  47 ret   :  68 
reti  :   1 rjmp  :  57 rol   :  24 ror   :  15 sbc   :   9 sbci  :  10 
sbi   :  14 sbic  :   0 sbis  :   2 sbiw  :  12 sbr   :   2 sbrc  :   2 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  51 std   :  23 sts   :   9 sub   :   5 subi  :  17 swap  :   2 
tst   :  19 wdr   :   1 
Instructions used: 81 out of 116 (69.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c8e   3178     36   3214   32768   9.8%
[.dseg] 0x000060 0x00026b      0     11     11    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
