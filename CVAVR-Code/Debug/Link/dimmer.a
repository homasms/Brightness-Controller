;/*
; * dimmer.c
; *
; * Created: 1/3/2021 12:43:42 PM
; * Author: ASA
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <Mega32.h>
;#include <stdlib.h>
;#include <lcd.h>
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000F #endasm
;#define ADC_VREF_TYPE 0xC0  //Volt.Ref ==> 2.56v
;unsigned minute,hour,second, fifthSecond;
;int timeOfOpeningCurtain = 0; // the time that curtain gets open
;
;void darkDay(float);
;void lightDay(float);
;void controlLED(float);
;
;float read_adc(unsigned char adc_input)
; 0000 0019 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A     //int result;
; 0000 001B     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000012 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001C     delay_us(10);   // Delay nseeded for the stabilization of the ADC input voltage
;PCODE: $00000016 VOL: 0
; 0000 001D     ADCSRA|=0x40; // Start the AD conversion
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001E     while ((ADCSRA & 0x10)==0); // Wait for the AD conversion to complete
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001F     ADCSRA|=0x10;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0020     //result = ADCW;
; 0000 0021     return ADCW;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022 }
;PCODE: $00000025 VOL: 0
;
;void main(void)
; 0000 0025 {
;PCODE: $00000026 VOL: 0
; 0000 0026     char buffer[32];
; 0000 0027     float T;
; 0000 0028 
; 0000 0029     lcd_init(16);
;PCODE: $00000027 VOL: 0
;	buffer -> Y+4
;	T -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002A     hour = 10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002B     DDRC = (1<<0) | (1<<1);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002C     DDRD = (1<<0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002D     DDRA = 0<<0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002E     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002F     ADCSRA=0x85;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0030 
; 0000 0031     // timer0
; 0000 0032     TCCR0=0x03;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0033     TCNT0=6;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0034     TIMSK=0x01;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0035     #asm("sei");
;PCODE: $0000003C VOL: 0
	sei
;PCODE: $0000003D VOL: 0
; 0000 0036 
; 0000 0037 while (1)
;PCODE: $0000003E VOL: 0
; 0000 0038     {
; 0000 0039     T=read_adc(0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003A     T=(T*2.56)/1024;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003B     lcd_gotoxy(1,0);ftoa(second,2,buffer);lcd_puts(buffer);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003C     lcd_gotoxy(0,1);ftoa(minute,2,buffer);lcd_puts(buffer);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D     //delay_ms(100);
; 0000 003E     //lcd_clear();
; 0000 003F     if(T < 0.45 ){
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0040         if(hour > 7 & hour < 18){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0041             darkDay(T);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0042         }
; 0000 0043         else
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0044             //PORTC.0 = 1;
; 0000 0045             controlLED(T);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0046     }
;PCODE: $00000076 VOL: 0
; 0000 0047     if(T > 0.45){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0048         if(hour > 7 & hour < 18)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0049             lightDay(T);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004A 
; 0000 004B         else
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004C             //PORTC.0 = 0;
; 0000 004D             controlLED(T);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004E         }
;PCODE: $0000008B VOL: 0
; 0000 004F     }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0050 }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;
;void controlLED(float T){
; 0000 0052 void controlLED(float T){
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0053     int onTime, offTime;
; 0000 0054     onTime = (5 - T);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;	T -> Y+4
;	onTime -> R16,R17
;	offTime -> R18,R19
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0055     offTime = (T)/ 100;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0056     PORTC.0 = 1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0057     delay_ms(onTime);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0058     PORTC.0 = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0059     delay_ms(offTime);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005A }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;void openCurtain(float T, float neededTimeForOpenCurtain){
; 0000 005C void openCurtain(float T, float neededTimeForOpenCurtain){
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005D     int onTime;
; 0000 005E     int remainTimeForOpeningCurtain = neededTimeForOpenCurtain - timeOfOpeningCurtain;
; 0000 005F     // stop opening curtain when that is completely open
; 0000 0060     if(10 < remainTimeForOpeningCurtain)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;	T -> Y+8
;	neededTimeForOpenCurtain -> Y+4
;	onTime -> R16,R17
;	remainTimeForOpeningCurtain -> R18,R19
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0061         onTime = 10 - T + T;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0062     else
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0063         onTime = remainTimeForOpeningCurtain;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0064     PORTC.1 = 1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0065     delay_ms(onTime);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0066     PORTC.1 = 0;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0067     delay_ms(onTime);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0068     timeOfOpeningCurtain += onTime;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0069 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;
;void closeCurtain(float T){
; 0000 006B void closeCurtain(float T){
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 006C     int onTime;
; 0000 006D     // if curtain is not opened at all, dont try to close it
; 0000 006E     if(timeOfOpeningCurtain > 0){
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;	T -> Y+2
;	onTime -> R16,R17
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 006F         if(timeOfOpeningCurtain > 10)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0070             onTime = 10 - T + T;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0071         else
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0072             onTime = timeOfOpeningCurtain;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0073         PORTD.0 = 1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0074         delay_ms(onTime);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0075         PORTD.0 = 0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0076         delay_ms(onTime);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0077         timeOfOpeningCurtain -= onTime;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0078     }
; 0000 0079 }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;
;// the light is low, on day
;void darkDay(float T){
; 0000 007C void darkDay(float T){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 007D     float neededTimeForOpenCurtain = 2000;
; 0000 007E     // curtain is compeletly open
; 0000 007F     if(timeOfOpeningCurtain >= neededTimeForOpenCurtain)
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;	T -> Y+4
;	neededTimeForOpenCurtain -> Y+0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0080         controlLED(T);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0081     // curtain is not completely open
; 0000 0082     else
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0083         openCurtain(T, neededTimeForOpenCurtain);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0084 }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;
;// the light is too much, on day
;void lightDay(float T){
; 0000 0087 void lightDay(float T){
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0088     // if LED is on, turn it off
; 0000 0089     if(PORTC.0 == 1)
;PCODE: $0000011C VOL: 0
;	T -> Y+0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 008A         PORTC.0 = 0;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 008B     // if LED is off, close the curtain
; 0000 008C     else
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 008D         closeCurtain(T);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 008E }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0092 {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0093 
; 0000 0094     TCNT0=6;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0095 
; 0000 0096     if(fifthSecond == 500){
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0097         fifthSecond = 0;
;PCODE: $00000131 VOL: 0
; 0000 0098         if(second==59){
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0099             second=0;
;PCODE: $00000135 VOL: 0
; 0000 009A             if(minute==59){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 009B                 minute=0;
;PCODE: $00000139 VOL: 0
; 0000 009C                 if(hour==23)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 009D                     hour=0;
;PCODE: $0000013D VOL: 0
; 0000 009E                 else
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 009F                     hour++;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00A0             }
;PCODE: $00000143 VOL: 0
; 0000 00A1             else
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00A2                 minute++;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00A3         }
;PCODE: $00000149 VOL: 0
; 0000 00A4         else
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00A5             second ++;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00A6     }
;PCODE: $0000014F VOL: 0
; 0000 00A7     else
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00A8         fifthSecond++;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00A9 }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;
;
